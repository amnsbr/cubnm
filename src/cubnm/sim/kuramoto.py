"""
Autogenerated using:
- Template: 'src/cubnm/sim/simgroup.py.mako'
- Model definition: 'codegen/recipes/kuramoto.yaml'
Do not modify this autogenerated code. Instead modify template
or model definition.
"""
from .base import SimGroup
import numpy as np

class KuramotoSimGroup(SimGroup):
    model_name = "Kuramoto"
    global_param_names = ['G']
    regional_param_names = ['init_theta', 'omega', 'sigma']
    state_names = ['theta']
    sel_state_var = "theta"
    n_noise = 1
    default_params = {
        "G": None,  # required
        "init_theta": None,  # required
        "omega": np.pi,
        "sigma": 0.17,
    }

    def __init__(
        self, 
        *args, 
        random_init_theta = True, 
        **kwargs
    ):
        """
        Group of Kuramoto simulations that are executed in parallel.

        Parameters
        ---------
        random_init_theta: :obj:`bool`
            set initial theta by randomly sampling from a uniform distribution
        *args, **kwargs:
            see :class:`cubnm.sim.SimGroup` for details

        Attributes
        ----------
        param_lists: :obj:`dict` of :obj:`np.ndarray`
            dictionary of parameter lists, including
                - ``'G'``: global coupling strength. Shape: (N_SIMS,)
                - ``'init_theta'``: initial phase angle. Shape: (N_SIMS, nodes)
                - ``'omega'``: natural frequency. Shape: (N_SIMS, nodes)
                - ``'sigma'``: noise amplitude. Shape: (N_SIMS, nodes)
                - ``'v'``: conduction velocity. Shape: (N_SIMS,)

        References
        ----------        
        * Kuramoto et al. 1984 "Chemical Oscillations, Waves, and Turbulence"
        * Cabral et al. 2011 NeuroImage (10.1016/j.neuroimage.2011.04.010)
        """
        self.random_init_theta = random_init_theta
        # parent init must be called after setting
        # model-specific attributes because
        # it sets .last_config which may include some
        # model-specific attributes
        super().__init__(*args, **kwargs)

    def get_config(self, *args, **kwargs):
        config = super().get_config(*args, **kwargs)
        config.update({
            'random_init_theta': self.random_init_theta,
        })
        return config
    
    @property
    def _model_config(self):
        """
        Internal model configuration used in the simulation
        """
        model_config = super()._model_config
        model_config.update({
            'random_init_theta': str(int(self.random_init_theta)),
        })
        return model_config

    @SimGroup.N.setter
    def N(self, N):
        super(KuramotoSimGroup, KuramotoSimGroup).N.__set__(self, N)
        if self.random_init_theta:
            # sample from uniform distribution of [0, 2*pi] across nodes and
            # repeat it across simulations
            # use the same random seed as the simulation noise
            rng = np.random.default_rng(self.sim_seed)
            self.param_lists["init_theta"] = np.tile(rng.uniform(0, 2 * np.pi, self.nodes), (self._N, 1))
        else:
            self.param_lists["init_theta"] = np.zeros((self._N, self.nodes), dtype=float)
            print("Warning: init_theta is set to zero")
