"""
Autogenerated using:
- Template: 'src/cubnm/sim/simgroup.py.mako'
- Model definition: 'codegen/recipes/jr.yaml'
Do not modify this autogenerated code. Instead modify template
or model definition.
"""
from .base import SimGroup
import numpy as np

class JRSimGroup(SimGroup):
    model_name = "JR"
    global_param_names = ['G']
    regional_param_names = ['J', 'a_1', 'a_2', 'a_3', 'a_4', 'sigma']
    state_names = ['y0', 'y1', 'y2', 'y3', 'y4', 'y5', 'y1_y2', 's_y1_y2']
    sel_state_var = "y1_y2"
    n_noise = 1
    default_params = {
        "G": None,  # required
        "J": 135.0,
        "a_1": 1.0,
        "a_2": 0.8,
        "a_3": 0.25,
        "a_4": 0.25,
        "sigma": 0.0001,
    }

    def __init__(self, *args, **kwargs):
        """
        Group of Jansen Rit simulations that are executed in parallel.

        Parameters
        ---------
        *args, **kwargs:
            see :class:`cubnm.sim.SimGroup` for details

        Attributes
        ----------
        param_lists: :obj:`dict` of :obj:`np.ndarray`
            dictionary of parameter lists, including
                - ``'G'``: global coupling strength. Shape: (N_SIMS,)
                - ``'J'``: average number of synapses. Shape: (N_SIMS, nodes)
                - ``'a_1'``: average probability of synapses in feedback excitatory loop. Shape: (N_SIMS, nodes)
                - ``'a_2'``: average probability of synapses in slow feedback excitatory loop. Shape: (N_SIMS, nodes)
                - ``'a_3'``: average probability of synapses in feedback inhibitory loop. Shape: (N_SIMS, nodes)
                - ``'a_4'``: average probability of synapses in slow feedback inhibitory loop. Shape: (N_SIMS, nodes)
                - ``'sigma'``: local noise sigma. Shape: (N_SIMS, nodes)
                - ``'v'``: conduction velocity. Shape: (N_SIMS,)
        """
        # parent init must be called after setting
        # model-specific attributes because
        # it sets .last_config which may include some
        # model-specific attributes
        super().__init__(*args, **kwargs)
